# This is a basic workflow to help you get started with Actions
 
name: GitHub-Autopilot-Simple-State-Pipeline-Windows

on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  #push:
    #branches:
      #- release
      #- 'migrations/**'
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: false

  ### Step 1: Define Environment Secrets ###
  ### Environment Secrets - Create Environment Secrets ###
  ### Navigate to Settings > Secrets & Variables > Actions
  # FLYWAY_EMAIL: Enter the email address linked to the Redgate Account that created the PAT
  # FLYWAY_TOKEN: Enter the PAT Value (This should be treated like a password and thus as a secure variable.
  # FLYWAY_AUTH_DISABLED: (Optional) - Create and set to true to skip the auth check stage
  # TARGET_DATABASE_USERNAME: Leave blank if using integratedSecurity (default).
  # TARGET_DATABASE_PASSWORD: Leave blank if using integratedSecurity (default).
  # CUSTOM_PARAMS: Optional - Used for passing custom Flyway Parameters to each Flyway command
  ### End of Environment Variables ###
  
  # Step 3: Authenticate Flyway with Personal Access Tokens (PATs)
  # Details on how to do this can be found here: https://documentation.red-gate.com/flyway/flyway-cli-and-api/tutorials/tutorial-personal-access-tokens
  # Documentation on all available Authentication methods can be found here: https://documentation.red-gate.com/fd/flyway-licensing-263061944.html
  FLYWAY_EMAIL: "${{ secrets.FLYWAY_EMAIL }}" # Enter the email address linked to the Redgate Account that created the PAT
  FLYWAY_TOKEN: "${{ secrets.FLYWAY_TOKEN }}" # Enter the PAT Value (This should be treated like a password and thus as a secure variable.
  FLYWAY_AUTH_DISABLED: "${{ secrets.FLYWAY_AUTH_DISABLED }}" # Create and set to true to skip the auth check stage, useful when Offline Permits are in use instead.

  
  BASELINE_VERSION: "001" # This should match the version number of your baseline script
  FIRST_UNDO_SCRIPT: "002" # This should match the first undo version in your project

  # Optional: Validate Flyway CLI installation for ephemeral agents.
  FLYWAY_CLI_INSTALL_CHECK: "${{ secrets.FLYWAY_CLI_INSTALL_CHECK }}" # Setting to false will skip the Flyway CLI check step
  FLYWAY_VERSION: "Latest" # This outlines the version of Flyway CLI that will be downloaded if no Flyway CLI is detected on the target agent (Examples - '11.0.0' for specific version. Or 'Latest' for latest version)
  FLYWAY_INSTALL_DIRECTORY: "C:\\FlywayCLI\\" # The path on the agent machine where Flyway CLI will be installed  

  # Optional: Side Quest #1 - Enable Flyway Pipeline Integration for tracking releases and drift. - https://flyway.red-gate.com/
  FLYWAY_PUBLISH_RESULT: "true" # Set this value to true to enable Flyway Pipelines and track your releases centrally!
  FLYWAY_DRIFT_ON_MIGRATE: "true" # Set this value to true to enable Flyway Pipelines drift detection and track your drift centrally!
 
### DO NOT EDIT BELOW THIS LINE - All variables set in the above section will be consumed by the jobs below and therefore do not require any updates to function ###

jobs:
  # This workflow contains a single job called "build"
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: "self-hosted" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'build'
    env:
      stage: 'Build'
      displayName: 'Build'
      DATABASE_NAME: 'AutoPilotBuild'
      ENVIRONMENT: 'Build' # This variable refers to the environment name present in the Flyway Projects TOML file. 
      TARGET_DATABASE_USERNAME: "${{ secrets.TARGET_DATABASE_USERNAME }}"
      TARGET_DATABASE_PASSWORD: "${{ secrets.TARGET_DATABASE_PASSWORD }}"
      CUSTOM_PARAMS: "${{ secrets.CUSTOM_PARAMS }}" # Secure method of adding custom Flyway Parameters (Example -X for debug)
      EXECUTE_BUILD: 'true' # Turn to false to skip the build stage tasks
      publishArtifacts: 'true' # Turn to false to skip the artifact upload
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Optional - If Enabled, Flyway CLI will be validated and installed if not present
      - name: Flyway - CLI Automatic Validation and Install
        run: bash ${{ GITHUB.WORKSPACE }}/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh
        if: env.FLYWAY_CLI_INSTALL_CHECK == 'true'
      # Step 1 - Flyway License Authentication #
      - name: Flyway Authentication
        if: ${{ env.EXECUTE_BUILD == 'true' && env.FLYWAY_AUTH_DISABLED != 'true' && success() }}
        run: |
         flyway auth -IAgreeToTheEula -email="${{ env.FLYWAY_EMAIL }}" -token="${{ env.FLYWAY_TOKEN }}"
      # Step 2 - Ensure the Build Database is cleaned of all objects, meaning the build starts from scratch

